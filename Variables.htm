<!DOCTYPE HTML>
<html>
<head>
<title>Variablen und Ausdrücke</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Variables">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke</a></li>
  <li><a href="#Operators">Operatoren innerhalb von Ausdrücken</a></li>
  <li><a href="#BuiltIn">Built-in-Variablen</a></li>
  <li><a href="#env">Umgebungsvariablen vs. normale Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher einer Variable</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">Variablen</h2>
<p><strong>Variablentypen</strong>: AutoHotkey besitzt keine explizit definierten Variablentypen. Allerdings wird eine Variable, die nur Ziffern enthält (optional mit einem Dezimalpunkt), bei einer mathematischen Operation oder bei einem Vergleich automatisch als Zahl interpretiert. Zur Verbesserung der Performance werden die Zahlen intern zwischengespeichert, um Konvertierungen von/in Zeichenketten zu vermeiden.</p>
<p><strong>Gültigkeitsbereiche und Deklarationen von Variablen</strong>: Mit Ausnahme von <a href="Functions.htm#Locals">lokalen Variablen</a> in Funktionen sind alle Variablen global; das heißt, dass deren Inhalte jederzeit vom Skript gelesen oder geändert werden können. Im Normalfall müssen Variablen nicht deklariert werden (in <a href="Functions.htm#Global">Funktionen</a> gibt es Ausnahmen); Variablen stehen zur Verfügung, sobald sie verwendet werden (zudem sind sie anfangs leer).</p>
<p id="Variable_names"><strong>Variablennamen</strong>: Bei Variablennamen ist die Groß- und Kleinschreibung egal (zum Beispiel wäre <em>AktuellesDatum</em> das gleiche wie <em>aktuellesdatum</em>). Variablennamen können bis zu 253 Zeichen lang sein und dürfen nur aus Buchstaben, Zahlen und folgenden Satzzeichen bestehen: # _ @ $</p>
<p>Aufgrund von Gestaltungsrichtlinien sollten die Namen der Variablen nur Buchstaben, Zahlen und Unterstriche enthalten (zum Beispiel: <em>PositionZeiger</em>, <em>Gesamt_Elemente</em> und <em>Eintrag_ist_gültig</em>). Wenn du dich an solchen Richtlinien hältst, können andere Programmierer dein Skript besser verstehen. Außerdem erhöht das die Chance, dass du mit deinen eigenen Skripten besser zurechtkommst, wenn du sie erneut lesen musst.</p>
<p>Variablennamen, die nur aus Ziffern bestehen, sind prinzipiell nur bei <a href="Scripts.htm#cmd">eingehenden Befehlszeilenparametern</a> von Bedeutung. Innerhalb von <a href="#Expressions">Ausdrücken</a> werden Ziffern nicht als Variablen interpretiert, weil sie zum Berechnen eines Wertes dienen.</p>
<p>Innerhalb von Ausdrücken sind Variablennamen wie <em>AND</em>, <em>OR</em> und <em>NOT</em> ungeeignet, weil sie als <a href="#Operators">Operatoren</a> interpretiert werden. Das Verwenden solcher Namen innerhalb eines Ausdrucks würde eine angemessene Evaluierung verhindern.</p>
<p id="assigning"><strong>Speichern von Variablenwerten</strong>: Es gibt zwei Methoden, wie eine Zeichenkette oder Zahl in eine Variable gespeichert werden kann: Traditions- und Ausdrucksmethode. Bei der Traditionsmethode werden Werte via <a href="commands/SetEnv.htm">Gleichheitszeichenoperator (=)</a> gespeichert. Solche Werte können <strong>ohne Anführungszeichen versehene</strong> Zeichenketten und in Prozentzeichen gesetzte Variablen sein. Zum Beispiel:</p>
<pre>MeineZahl = 123
MeineZeichenkette = Das ist eine literale Zeichenkette.
KopieVonVar = %Var%  <em>; Bei dem Operator "=" sind Prozentzeichen notwendig, um den Inhalt einer Variable abzurufen.</em></pre>
<p>Bei der Ausdrucksmethode werden Werte via <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a> gespeichert. Solche Werte können Zahlen, <strong>in Anführungszeichen gesetzte</strong> Zeichenketten und andere Arten von <a href="#Expressions">Ausdrücken</a> sein. Funktionsgemäß sind die folgenden Beispiele mit den vorherigen Beispielen identisch:</p>
<pre>MeineZahl := 123
MeineZeichenkette := "Das ist eine literale Zeichenkette."
KopieVonVar := Var  <em>; Bei dem Operator ":=" werden Prozentzeichen weggelassen.</em></pre>
<p>Die letztere Methode wird von vielen bevorzugt, weil sie aufgrund ihrer <a href="#Expressions">Ausdruckssyntax</a> flexibler ist - sie ist mit der Syntax vieler anderer Sprachen vergleichbar.</p>
<p>Natürlich gibt es auch zwei Methoden, wie man den Inhalt einer Variable löschen kann (um sie sozusagen leer zu machen):</p>
<pre>MeineVar =
MeineVar := ""</pre>
<p>Die obigen Anführungszeichen sollten nur bei dem Operator ":=" verwendet werden. Wären sie bei dem Operator "=" angegeben, würden zwei Anführungszeichen direkt in die Variable gespeichert werden.</p>
<p id="retrieving"><strong>Abrufen von Variablenwerten</strong>: Wie beim Speichern von Werten auch, gibt es zwei Methoden zum Abrufen von Werten: Traditions- und Ausdrucksmethode. Bei der Traditionsmethode müssen die Namen der Variablen mit Prozentzeichen umschlossen werden, um ihre Inhalte abrufen zu können. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> Der Wert in der Variable namens Var ist %Var%.
KopieVonVar = %Var%</pre>
<p>Bei der Ausdrucksmethode müssen die Prozentzeichen weggelassen und Zeichenketten in Anführungszeichen gesetzt werden. Funktionsgemäß sind die folgenden Beispiele mit den vorherigen Beispielen identisch:</p>
<pre>MsgBox <strong>%</strong> "Der Wert in der Variable namens Var ist " . Var . "."  <em>; Mit einem Punkt können zwei Zeichenketten verkettet (verbunden) werden.</em>
KopieVonVar := Var</pre>
<p>Bei der oberen MsgBox-Zeile kann man sehen, dass der Traditionsmodus des Parameters mithilfe eines Prozent- und Leerzeichens in den Ausdrucksmodus geändert wurde. Im Normalfall verwenden alle Befehle den Traditionsmodus (wenn nicht anders beschrieben). Allerdings sind bestimmte Parameter einiger Befehle in der Lage, Ausdrücke zu akzeptieren - in diesem Fall sind führende Prozentzeichen erlaubt, aber nicht notwendig. Funktionsgemäß sind die folgenden drei Beispiele identisch, da <a href="commands/Sleep.htm">Sleep</a>'s erster Parameter auch ein Ausdruck sein kann:</p>
<pre>Sleep MillisekundenWarten
Sleep %MillisekundenWarten%
Sleep % MillisekundenWarten</pre>
<p><strong>Vergleichen von Variablen</strong>: Bitte ließ dir den folgenden Abschnitt genau durch, wie auf welche Weise Vergleiche durchgeführt werden können, insbesondere darüber, wann und wo die runden Klammern notwendig sind.</p>
<h2 id="Expressions">Ausdrücke</h2>
<p>Ausdrücke sind nützlich, um eine oder mehrere Operationen an Variablen, literalen Zeichenketten und/oder literalen Zahlen durchzuführen.</p>
<p>Innerhalb eines Ausdrucks werden Variablennamen nicht mit Prozentzeichen umschlossen (nur bei <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> und anderen <a href="#ref">Doppelverweisen</a>). Demzufolge müssen literale Zeichenketten in Anführungszeichen gesetzt werden, wenn sie nicht als Variablen interpretiert werden sollen. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or GefundeneFarbe &lt;&gt; "Blau")
    MsgBox Die Einstellung ist zu hoch oder die Farbe ist falsch.</pre>
<p>Im obigen Beispiel kann man sehen, dass "Blau" in Anführungszeichen gesetzt wurde, weil es als Zeichenkette interpretiert werden soll. Das folgende Beispiel zeigt, wie mit zwei aufeinanderfolgenden Anführungszeichen ein <em>tatsächliches</em> Anführungszeichen in eine literale Zeichenkette eingefügt werden kann: <code>"Sie sagte: <span class="red">""</span>Ein Apfel täglich.<span class="red">""</span>"</code>.</p>
<p><strong>Wichtig</strong>: Eine Ausdrucks-if-Anweisung, deren erstes Zeichen nach dem "if" eine runde Startklammer ist, unterscheidet sich von einer <a href="commands/IfEqual.htm">Traditions-if-Anweisung</a> wie <code>If GefundeneFarbe &lt;&gt; Blau</code>. Eine if-Anweisung wird als Ausdruck angesehen, wenn sie entweder vollständig von runden Klammern umschlossen ist oder wenn man so etwas wie <code>if (x &gt; 0) and (y &gt; 0)</code> schreibt. Die runde Startklammer kann man weglassen, wenn das erste Element nach dem "if" ein <a href="Functions.htm">Funktionsaufruf</a> oder ein Operator wie "not" oder "!" ist.</p>
<p><strong>Leere Zeichenketten</strong>: Mithilfe von zwei aufeinanderfolgenden Anführungszeichen kann eine leere Zeichenkette in einem Ausdruck angegeben werden. Zum Beispiel wäre die Anweisung <code>if (MeineVar &lt;&gt; "")</code> wahr, wenn <em>MeineVar</em> nicht leer ist. In einer <a href="commands/IfEqual.htm">Traditions-if-Anweisung</a> werden zwei aufeinanderfolgende Anführungszeichen allerdings literal behandelt. Zum Beispiel wäre die Anweisung <code>if MeineVar = ""</code> nur wahr, wenn <em>MeineVar</em> genau diese zwei Zeichen enthält. Möchte man bei einer Traditions-if-Anweisung überprüfen, ob die Variable leer ist, genügt es, nach der Variable ein = oder &lt;&gt; anzugeben: <code>if Var =</code>.</p>
<p>Ungültige Ausdrücke wie <code>(x +* 3)</code> ergeben immer eine leere Zeichenkette.</p>
<p><strong>Speichern eines Ausdruckwertes</strong>: Mit dem <a href="commands/SetExpression.htm">Operator ":="</a> kann der Wert bzw. das Ergebnis eines Ausdrucks in eine Variable gespeichert werden. Zum Beispiel:</p>
<pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Logische Werte</strong>: Bei einem Ausdruck, der als wahr oder falsch gewertet werden muss (z. B. bei einer IF-Anweisung), wird ein leerer Wert oder ein Wert mit Null als falsch angesehen und die restlichen Werte als wahr. Zum Beispiel wäre die Anweisung <code>if Elementzählung</code> nur falsch, wenn Elementzählung leer oder 0 ist. Der Ausdruck <code>if not Elementzählung</code> würde das Gegenteil zurückgeben.</p>
<p>Operatoren wie NOT/AND/OR/&gt;/=/&lt; erzeugen automatisch einen wahren oder falschen Wert: sie geben eine 1 für True und 0 für False zurück. Im folgenden Beispiel bekommt die <em>Done</em>-Variable eine 1 zugewiesen, wenn eine der beiden Bedingungen wahr ist:</p>
<pre>Done := A_Index &gt; 5 or Gefunden</pre>
<p>Wie es bereits oben angedeutet wurde, enthält eine Variable einen falschen Wert, sobald sie leer gemacht oder ihr eine 0 zugewiesen wird. So könnte man mit einer einfachen Anweisung wie <code>if Done</code> überprüfen, ob die Done-Variable wahr oder falsch ist.</p>
<p><span id="True"></span><span id="False"></span>Die Wörter <em>True</em> und <em>False</em> sind Built-in-Variablen, die eine 1 und eine 0 enthalten. Sie können verwendet werden, um ein Skript besser lesbar zu machen, z. B.:</p>
<pre>Zeichengenauigkeit := false
Weitersuchen := true</pre>
<p><strong>Integer und Gleitkommazahlen</strong>: Innerhalb eines Ausdrucks werden Zahlen mit Dezimalpunkt als Gleitkommazahlen angesehen; pure Zahlen sind Integer. Bei den meisten Operatoren -- wie Addition und Multiplikation -- gilt: Wenn einer der Eingabewerte eine Gleitkommazahl ist, wird das Ergebnis auch eine Gleitkommazahl sein.</p>
<p>Innerhalb von Ausdrücken und auch sonst können Zahlen entweder im hexadezimalen oder dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel wäre <code>Sleep 0xFF</code> das gleiche wie <code>Sleep 255</code>. Seit v1.0.46.11 werden Gleitkommazahlen in wissenschaftlicher Schreibweise erkannt, sofern sie einen Dezimalpunkt enthalten (z. B. <code>1<strong>.</strong>0e4</code> und <code>-2<strong>.</strong>1E-4</code>).</p>
<p id="percent-space"><strong>Erzwingen eines Ausdrucks</strong>: Im Normalfall unterstützen Befehlsparameter keine Ausdrücke (außer AusgabeVar-Parameter). Durch Voranstellen eines Prozentzeichens und Leer- oder Tabulatorzeichens kann man die Auswertung eines Ausdrucks erzwingen. Seit <span class="ver">[v1.1.21+]</span> kann dieses Präfix in allen EingabeVar-Parametern verwendet werden, außer bei Traditions-IF-Befehlen (verwende stattdessen <a href="commands/IfExpression.htm">If (Ausdruck)</a>). Mit dieser Technik greift man häufig auf <a href="misc/Arrays.htm">Arrays</a> zu. Zum Beispiel:</p>
<pre><a href="commands/FileAppend.htm">FileAppend</a>, <strong>%</strong> MeinArray[i], Meine Datei.txt
<a href="commands/FileAppend.htm">FileAppend</a>, <strong>%</strong> MeinPseudoArray%i%, Meine Datei.txt
<a href="commands/MsgBox.htm">MsgBox</a> <strong>%</strong> "Die MeineVar-Variable enthält " . MeineVar . "."
<a href="commands/Loop.htm">Loop</a> <strong>%</strong> Iterationen + 1
<a href="commands/WinSet.htm">WinSet</a>, Transparent, <strong>%</strong> X + 100
<a href="commands/Control.htm">Control</a>, Choose, <strong>%</strong> AktuelleAuswahl - 1</pre>

<h2 id="Operators">Operatoren innerhalb von Ausdrücken</h2>
<p>Operatoren mit gleichwertiger Priorität, wie z. B. Multiplizieren (*) und Dividieren, (/), werden von links nach rechts ausgewertet, sofern nicht anders unten angegeben. Ein Operator mit niedrigerer Priorität, wie z. B. Addieren (+), wird <em>erst</em> ausgewertet, wenn ein höherer Operator, wie z. B. Multiplizieren (*), ausgewertet wurde. Zum Beispiel würde 3 + 2 * 2 wie 3 + (2 * 2) ausgewertet werden. Mit runden Klammern können die Prioritäten wie folgt überschrieben werden: (3 + 2) * 2</p>
<p>In der Regel werden leere Werte (leere Zeichenketten) oder nicht-numerische Werte bei einer mathematischen Operation <strong>nicht</strong> als Null angesehen. Stattdessen werden sie als Fehler behandelt - der Fehler bewirkt, dass dieser Teil des Ausdrucks eine leere Zeichenkette zurückgibt. Wenn beispielsweise eine Variable namens X leer wäre, würde der Ausdruck X+1 einen leeren Wert statt eine 1 zurückgeben.</p>
<p>Aus historischen Gründen werden <em>in Anführungszeichen gesetzte</em> numerische Zeichenketten wie <code>"123"</code> immer als nicht-numerisch angesehen, wenn sie direkt in einem Ausdruck verwendet werden (aber nicht, wenn sie in einer Variable gespeichert sind oder von einer Funktion zurückgegeben werden). Dieser nicht-numerische Attribut kann mit <a href="#concat">Verkettungen</a> erzwungen werden, demzufolge werden Ausdrücke wie <code>"0x" n</code> einen nicht-numerischen Wert erzeugen (selbst wenn n gültige hexadezimale Ziffern enthält). Dieses Problem kann man umgehen, indem man den Wert in eine Variable speichert oder ihn via Funktion, wie z. B. <a href="Functions.htm#Round">Round()</a>, übergibt. Skripte sollten keine in Anführungszeichen gesetzte literale Zahlen enthalten, weil dieses Verhalten eventuell in einer zukünftigen Version geändert wird.</p>

<h3>Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr id="ref">
    <td style="text-align:center; white-space:nowrap"><strong>%Var%</strong></td>
    <td><p>Umschließt man innerhalb eines Ausdrucks eine Variable mit Prozentzeichen (z. B. %Var%), wird der <u>gesamte Inhalt</u> dieser Variable als Name oder Teilname einer anderen Variable angesehen (wenn es so eine Variable nicht gibt, wird %Var% in eine leere Zeichenkette aufgelöst). Meistens verwendet man diese Methode bei <a href="misc/Arrays.htm#pseudo">Pseudo-Array</a>-Elemente, z. B:</p>
      <pre>Var := MeinArray%A_Index% + 100</pre>
      <p>Aus Gründen der Abwärtskompatibilität werden Befehlsparameter, die als "kann ein Ausdruck sein" dokumentiert sind, die Prozentzeichen bei einem Verweis (z. B. %Var%, aber nicht Array%i%) ignorieren, als wären sie nicht vorhanden. Umschließe den Verweis mit runden Klammern, wenn dieses Verhalten verhindert werden soll; z. B. <code>Sleep (%Var%)</code>.</p>
      <p><span class="ver">[AHK_L 52+]:</span> Absofort kann %Var%, neben den normalen Variablen, in eine <a href="#env">Umgebungsvariable</a>, Zwischenablage oder <a href="#BuiltIn">reservierte/schreibgeschützte Variable</a> aufgelöst werden. Vor Revision 52 gab %Var% in solchen Fällen eine leere Zeichenkette zurück.</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>x.y</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Objektzugriff</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei muss <i>y</i> ein literaler Wert sein. Siehe <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
  <tr id="new">
    <td style="text-align:center"><strong>new</strong></td>
    <td><span class="ver">[v1.1.00+]:</span> Erstellt ein neues Objekt, das von einem anderen Objekt abgeleitet wird. Zum Beispiel wäre <code>x := new y</code> generell das gleiche wie <code>x := {base: y}</code>. Nach dem Wort <code>new</code> sollte eine Variable oder ein einfacher Klassenname in Form von <code>GlobaleKlasse.VerschachtelteKlasse</code> erfolgen, und je nach Bedarf Parameter wie in <code>x := new y(z)</code> (wo <code>y</code> eine Variable ist, nicht ein Funktionsname). Um mehr darüber zu erfahren, siehe <a href="Objects.htm#Custom_Objects">Benutzerdefinierte Objekte</a>.</td>
  </tr>
  <tr id="IncDec">
    <td style="text-align:center"><strong>++<br>
    
    --</strong></td>
    <td><strong>Pre- und Post-Inkrement/Dekrement</strong>. Addiert oder subtrahiert eine Variable mit 1 (vor Version 1.0.46 konnten nur sie selbst auf einer Zeile verwendet werden; anderen Operatoren durften nicht vorhanden sein). Der Operator kann entweder vor oder hinter dem Variablennamen erfolgen. Erfolgt der Operator <em>vor</em> dem Namen, wird die Operation sofort durchgeführt und ihr Ergebnis für die nächste Operation bereitgestellt. Zum Beispiel würde <code>Var := ++X</code> die X-Variable sofort erhöhen und ihr Wert in <em>Var</em> speichern. Erfolgt der Operator <em>hinter</em> dem Variablennamen, wird die Operation <em>erst nach</em> der nächsten Operation durchgeführt. Zum Beispiel würde <code>Var := X++</code> die X-Variable erst erhöhen, wenn der aktuelle Wert von X in <em>Var</em> gespeichert wird. Aufgrund der Abwärtskompatibilität behandeln diese Operatoren leere Variablen als Null, sofern sie alleine auf einer Zeile vorkommen; zum Beispiel würde sowohl <code>y := 1, ++x</code> als auch <code>MsgBox % ++x</code> ein leeres Ergebnis erzeugen, wenn x leer ist.</td>
  </tr>
  <tr id="pow">
    <td style="text-align:center"><strong>**</strong></td>
    <td><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent können einen Dezimalpunkt enthalten. Ist der Exponent negativ, wird das Ergebnis in eine Gleitkommazahl umgewandelt, auch dann, wenn die Basis und der Exponent Integer sind. Da dieser Operator eine höhere Priorität hat als ein einstelliges Minuszeichen, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und daher -4 zurückgeben. Um eine literale negative Zahl demzufolge potenzieren zu können, muss sie in runde Klammern gesetzt werden, z. B <code>(-2)**2</code> . Hinweis: Eine negative Basis in Verbindung mit einem gebrochenen Exponenten wie <code>(-2)**0.5</code> wird nicht unterstützt; das Ergebnis wird eine leere Zeichenkette sein. Schreibweisen wie <code>(-2)**2</code> und <code>(-2)**2.0</code> werden aber unterstützt.</td>
  </tr>
  <tr id="unary">
    <td style="text-align:center"><strong>-<br>
    
    !<br>
    
    ~<br>
    
    &amp; *</strong></td>
    <td><p><strong>Einstelliges Minuszeichen (-)</strong>: Auch wenn dieser Operator genauso aussieht wie der Subtraktionsoperator - einstellige Minuszeichen können nur bei einzelnen Elementen oder Teilausdrücken angefügt werden: <code><strong>-</strong>(3 / <strong>-</strong>x)</code>. Einstellige Pluszeichen (+) innerhalb eines Ausdrucks werden ignoriert.</p>
      <p><strong>Logisches NICHT (!)</strong>: Ist der Operand leer oder 0, wird das Ergebnis mit einem logischen NICHT eine 1 sein, also "wahr". Ansonsten ist das Ergebnis eine 0 (falsch). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist das gleiche wie <strong>!</strong>, aber <strong>!</strong> hat eine höhere Priorität. Seit v1.0.46 sind aufeinanderfolgende einstellige Operatoren wie <code><strong>!!</strong>Var</code> erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Invertiert jedes Bit seines Operanden. Ist der Operand eine Gleitkommazahl, wird er vor der Berechnung auf einen Integer gekürzt. Liegt der Operand zwischen 0 und 4294967295 (0xffffffff), wird er als <u>vorzeichenloser</u> 32-Bit-Wert behandelt. Ansonsten wird er als <u>vorzeichenbehafteter</u> 64-Bit-Wert behandelt. Zum Beispiel wäre <code>~0xf0f</code> dann 0xfffff0f0 (4294963440).</p>
      <p id="amp"><strong>Adresse (&amp;)</strong>: <code>&amp;MeineVar</code> ermittelt die Adresse des Speicherinhalts von <em>MeineVar</em>. Solche Adressen sind üblicherweise bei <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> nützlich. <code>&amp;MeineVar</code> deaktiviert außerdem das Caching von Binärzahlen in dieser Variable, und verringert dadurch ihre Performance, falls sie jemals bei mathematischen oder numerischen Vergleichen einbezogen wird. Das Caching einer Variable wird reaktiviert, wann immer sich ihre Adresse ändert (z. B. via <a href="commands/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenzierung (*)</strong>: <code>*Ausdruck</code> geht davon aus, dass <code>Ausdruck</code> in eine numerische Speicheradresse aufgelöst wird; es ermittelt das Byte auf dieser Adresse als eine Zahl zwischen 0 und 255 (0 wird immer abgerufen, wenn die Adresse 0 ist; jede andere ungültige Adresse sollte man lassen, weil das Skript ansonsten abstürzen könnte). Allerdings ist <a href="commands/NumGet.htm">NumGet()</a> zum Abrufen von binären Zahlen besser geeignet.</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>*<br>
    
    /<br>
    
    //
    
    </strong></td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind, ansonsten ist es eine Gleitkommazahl.</p>
      <p id="divide"><strong>Echtes Dividieren (/)</strong>: Im Gegensatz zu <a href="commands/EnvDiv.htm">EnvDiv</a> wird die echte Division immer eine Gleitkommazahl zurückgeben, auch dann, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>3/2</code> gleich 1.5 statt 1, und <code>4/2</code> gleich 2.0 statt 2.</p>
      <p id="FloorDivide"><strong>Floor-Dividieren (//)</strong>: Der Doppel-Schrägstrich-Operator verwendet die leistungsstarke Integer-Division, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>5//3</code> gleich 1 und <code>5//-3</code> gleich -1. Wenn einer der beiden Eingabewerte eine Gleitkommazahl ist, wird die Gleitkomma-Division erfolgen und das Ergebnis auf den nächstmöglichen linksbefindlichen Integer gekürzt. Zum Beispiel wäre <code>5//3.0</code> gleich 1.0 und <code>5.0//-3</code> gleich -2.0. Das Ergebnis wird im Gleitkommaformat gespeichert, selbst wenn das Ergebnis dieser Gleitkomma-Division ein Integer ist. Für Modulo, siehe <a href="commands/Math.htm#Mod">Mod()</a>.</p>
    <p>Die Operatoren <a href="commands/EnvMult.htm">*=</a> und <a href="commands/EnvDiv.htm">/=</a> sind eine Kurzschreibweise, um den Wert in einer Variable mit einem anderen Wert zu multiplizieren oder dividieren. Zum Beispiel würde <code>Var *= 2</code> das gleiche Ergebnis wie <code>Var := Var * 2</code> erzeugen (die erste Methode ist performanter).</p>
    <p>Eine Division durch 0 erzeugt ein leeres Ergebnis (leere Zeichenkette).</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>+<br>
    
    -</strong></td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Die Operatoren <a href="commands/EnvAdd.htm"><strong>+=</strong></a> und <a href="commands/EnvSub.htm"><strong>-=</strong></a> sind eine Kurzschreibweise zum Erhöhen oder Verringern einer Variable. Zum Beispiel würde <code>Var += 2</code> das gleiche Ergebnis wie <code>Var := Var + 2</code> erzeugen (die erste Methode ist performanter). Desweiteren kann mit <a href="#IncDec">Var++, Var--, ++Var oder --Var</a> eine Variable auf einfache Weise um 1 erhöht oder verringert werden.</p>
    </td>
  </tr>
  <tr id="bitwise">
    <td style="text-align:center"><strong>&lt;&lt;<br>
    
    &gt;&gt;</strong></td>
    <td><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong> und <strong>nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Jeder Eingabewert im Gleitkommaformat wird zu einem Integer gekürzt, bevor die Berechnung erfolgt. Die bitweise Verschiebung nach links (<strong>&lt;&lt;</strong>) wäre das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" multiplizieren. Die bitweise Verschiebung nach rechts (<strong>&gt;&gt;</strong>) wäre das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" dividieren und das Ergebnis dann auf den nächstmöglichen Integer auf der Zahlenreihe runden; zum Beispiel wäre <code>-3&gt;&gt;1</code> gleich -2.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>&amp;<br>
      
      ^<br>
      
      |
    
    </strong></td>
    <td><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste Priorität und <strong>|</strong> die niedrigste Priorität. Jeder Eingabewert im Gleitkommaformat wird zu einem Integer gekürzt, bevor die Berechnung erfolgt.</td>
  </tr>
  <tr id="concat">
    <td style="text-align:center"><strong>.</strong></td>
    <td><p><strong>Verkettung</strong>. Mit dem Punkt-Operator können zwei Elemente zu einer Zeichenkette kombiniert werden (auf beiden Seiten des Punktes muss mindestens ein Leerzeichen vorkommen). Den Punkt kann man weglassen, um das gleiche zu erreichen (außer bei Zweideutigkeiten wie <code>x <strong>-</strong>y</code>, oder wenn das rechtsbefindliche Element ein ++ oder -- davor hat). Fehlt der Punkt, sollte mindestens ein Leerzeichen zwischen den Elementen vorhanden sein, die zusammengeführt werden sollen.<br>
      Beispiel (Ausdrucksmethode): <code>Var := "Die Farbe ist " <strong>.</strong> GefundeneFarbe</code><br>
      Beispiel (Traditionsmethode): <code>Var = Die Farbe ist %GefundeneFarbe%</code></p>
        <p>Teilausdrücke kann man auch verketten. Zum Beispiel: <code>Var := "Der Nettopreis ist " <strong>.</strong> Preis * (1 - Rabatt/100)</code>.</p>
        <p>Eine Zeile, die mit einem Punkt (oder beliebig anderen Operator) beginnt, wird automatisch mit der Zeile darüber <a href="Scripts.htm#continuation">verbunden</a>.</p></td>
  </tr>
  <tr id="regex">
    <td style="text-align:center"><strong>~=</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> Kurzschreibweise für <a href="commands/RegExMatch.htm">RegExMatch</a>. Zum Beispiel würde <code>"abc123" ~= "\d"</code> den ErrorLevel auf 0 setzen und 4 zurückgeben (die Position des ersten numerischen Zeichens). Bevor v1.1.03 veröffentlicht wurde, hatte dieser Operator die gleiche Priorität wie der <em>Gleichheitsoperator (=)</em>, und fehlte in der Dokumentation.</td>
  </tr>
  <tr id="compare">
    <td style="text-align:center"><strong>&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    
    &gt;= &lt;=</strong></td>
    <td><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Wenn einer der beiden Eingabewerte keine Zahl ist, werden sie alphabetisch verglichen (in diesem Kontext wird eine in Anführungszeichen gesetzte Zeichenkette wie "55" immer als nicht-numerisch angesehen). Der Vergleich unterscheidet nur zwischen Groß- und Kleinschreibung, wenn <a href="commands/StringCaseSense.htm">StringCaseSense</a> aktiviert ist. Siehe auch: <a href="commands/Sort.htm">Sort</a></td>
  </tr>
  <tr id="equal">
    <td style="text-align:center"><strong>=<br>
      
      ==<br>
    
    &lt;&gt; !=</strong></td>
    <td><strong>Gleich (=)</strong>, <strong>zeichengenau gleich (==)</strong> und <strong>ungleich (&lt;&gt; oder !=)</strong>. Funktionsgemäß sind die Operatoren <strong>!=</strong> und <strong>&lt;&gt;</strong> identisch. Die Operatoren <strong>==</strong> und <strong>=</strong> verhalten sich gleich. Sobald jedoch einer der Eingabewerte eine Zeichenkette ist, wird <strong>==</strong> zwischen Groß- und Kleinschreibung unterscheiden, während <strong>=</strong> dies nicht tut (die Nichtunterscheidungsmethode ist abhängig von <a href="commands/StringCaseSense.htm">StringCaseSense</a>). Die Operatoren <strong>&lt;&gt;</strong> und <strong>!=</strong> berücksichtigen <a href="commands/StringCaseSense.htm">StringCaseSense</a>. Hinweis: In diesem Kontext wird eine in Anführungszeichen gesetzte Zeichenkette wie "55" immer als nicht-numerisch angesehen.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>NOT</strong></td>
    <td><strong>Logisches NICHT</strong>. Abgesehen von seiner geringeren Priorität, ist dieser Operator funktionsgemäß identisch mit dem <strong>!</strong>-Operator. Zum Beispiel wäre <code>not (x = 3 or y = 3)</code> das gleiche wie <code><strong>!</strong>(x = 3 or y = 3)</code>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>AND<br>
    
    &amp;&amp;</strong></td>
    <td>Beide sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>. Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet. Eine Zeile, die mit AND / OR / &amp;&amp;/ || (oder ein beliebig anderer Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>OR<br>
    
    ||</strong></td>
    <td>Beide sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>. Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet.</td>
  </tr>
  <tr id="ternary">
    <td style="text-align:center"><strong>?:</strong></td>
    <td><strong>Ternärer Operator</strong> <span class="ver">[v1.0.46+]</span>. Dieser Operator ist die Kurzschreibweise für eine <a href="commands/IfExpression.htm">if-else-Anweisung</a>. Der Operator wertet die Bedingung auf seiner linken Seite aus, um festzustellen, welche der beiden Verzweigungen das Endergebnis sein soll. Zum Beispiel würde <code>Var := x&gt;y ? 2 : 3</code> eine 2 in <em>Var</em> speichern, falls x größer als y ist; ansonsten wird eine 3 gespeichert. Zur Verbesserung der Performance wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>).</td>
  </tr>
  <tr id="AssignOp">
    <td style="text-align:center"><strong>:=<br>
        
        +=<br>
        
        -=<br>
        
        *=<br>
        
        /=<br>
        
        //=<br>
        
        .=<br>
        
        |=<br>
        
        &amp;=<br>
        
        ^=<br>
        
        &gt;&gt;=<br>
        
        &lt;&lt;=</strong>
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in die gleiche Variable (bevor die Version 1.0.46 veröffentlicht wurde, konnten sie als Operator nur ganz links auf der Zeile stehen, zudem wurden nur die ersten fünf Operatoren unterstützt). Der einfachste Zuweisungsoperator ist das <a href="commands/SetExpression.htm">Doppelpunkt-Gleich (:=)</a> - dieser Operator kann das Ergebnis eines Ausdrucks in eine Variable speichern. Da sie eine Kurzschreibweise eines Operators ist, findest du ihre Beschreibung jeweils beim dazugehörigen Operator in dieser Tabelle. Beispiel 1: <code>Var //= 2</code> führt eine <a href="#FloorDivide">Floor-Division</a> durch, um <em>Var</em> mit 2 zu teilen, und speichert dann das Ergebnis wieder in <em>Var</em>. Beispiel 2: <code>Var <strong>.=</strong> "abc"</code> ist die Kurzschreibweise für <code>Var := Var <strong>.</strong> "abc"</code>.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Demzufolge würde eine Zeile wie <code>Var1 := Var2 := 0</code> eine 0 in <em>Var2</em> speichern und dann <em>Var2</em> in <em>Var1</em> speichern.</p>
    <p>Verwendet man eine Zuweisung als Eingabewert eines anderen Operators, wird ihr Wert die Variable selbst sein. Zum Beispiel wäre der Ausdruck <code>(Var += 2) &gt; 50</code> wahr, wenn der gerade eben erhöhte Wert in <em>Var</em> größer als 50 ist. Mit diesem Verfahren könnte man auch eine Zuweisung via <a href="Functions.htm#ByRef">ByRef</a> übergeben oder ihre <a href="#amp">Adresse</a> verwenden; zum Beispiel: <code>&amp;(x:="abc")</code>.</p>
    <p>Die Priorität der Zuweisungsoperatoren erhöht sich automatisch, wenn dadurch ein Syntaxfehler verhindert oder ein besseres Verhalten bereitgestellt werden kann. Zum Beispiel: Die Auswertung von <code>not x := y</code> entspräche <code>not (x := y)</code>, <code>++Var := X</code> entspräche <code>++(Var := X)</code>; und <code>Z &gt; 0 ? X := 2 : Y := 2</code> entspräche <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code>.</p>
    <p>Bekannte Einschränkungen durch Abwärtskompatibilität (die in einer zukünftigen Version behoben werden): 1) Wenn <strong>/=</strong> als Operator ganz links in einem Ausdruck steht und nicht zu einer <a href="#comma">Mehrfachanweisung</a> gehört, erfolgt die <a href="#FloorDivide">Floor-Division</a>, sofern keiner der Eingabewerte eine Gleitkommazahl ist (ansonsten wird <strong>/=</strong> die <a href="#divide">echte Division</a> durchführen); 2) <a href="commands/EnvAdd.htm">Datum/Zeit-Berechnung</a> wird von <strong>+=</strong> und <strong>-=</strong> nur unterstützt, wenn dieser Operator ganz links auf der Zeile vorkommt; 3) Die Operatoren <strong>+=</strong>, <strong>-=</strong> und *= behandeln leere Variablen als 0, solange sie einzeln auf einer Zeile vorkommen; zum Beispiel würde sowohl <code>y := 1, x += 1</code> als auch <code>MsgBox % x -= 3</code> ein leeres Ergebnis erzeugen, falls x leer ist.</p></td>
  </tr>
  <tr id="comma">
    <td style="text-align:center"><strong>,</strong></td>
    <td><p><strong>Komma (mehrere Anweisungen)</strong> <span class="ver">[v1.0.46+]</span>. Kommas können verwendet werden, um mehrere Teilausdrücke nebeneinander zu setzen. Es ist eine häufig eingesetzte Methode, um mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x := 1<strong>,</strong> y += 2<strong>,</strong> ++index, func()</code>. Solche Anweisungen werden von links nach rechts ausgeführt. Hinweis: Eine Zeile, die mit einem Komma (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>. Siehe auch: <a href="#CommaPerf">Komma-Performance</a>.</p>
      <p>Seit v1.0.46.01 gilt: Wenn direkt nach einem Komma eine Variable und ein Gleichheitszeichen erfolgt, verhält sich dieses Gleichheitszeichen automatisch wie eine <a href="commands/SetExpression.htm">Zuweisung (:=)</a>. Zum Beispiel wären alle folgenden Elemente Zuweisungen: <code>x := 1, y = 2, a = b = c</code>. Neue Skripte sollten sich nicht auf dieses Verhalten verlassen, weil es noch geändert werden könnte. Diese Regel gilt nur für reine Variablen und nicht für <a href="#ref">Doppeldereferenzierungen</a> - das Folgende würde nur eine Zuweisung enthalten: <code>x:=1, %y%=2</code></p></td>
  </tr>
  <tr>
    <td style="text-align:center; white-space:nowrap"><p><strong>mod()<br>
        
        round()<br>
    
    abs()</strong></p></td>
    <td>Diese und andere built-interne mathematischen Funktionen findest du <a href="commands/Math.htm">hier</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center; white-space:nowrap"><p><strong>%func%()</strong></p></td>
    <td>Siehe <a href="Functions.htm#DynCall">Dynamisches Aufrufen einer Funktion</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>func.()</strong></td>
    <td><p><strong>Veraltet:</strong> Diese Syntax wird nicht mehr empfohlen. Benutze stattdessen <code>%func%()</code> (für Funktionsnamen und Objekte) oder <code>func.Call()</code> (für Funktionsobjekte).</p>
    <p><span class="ver">[AHK_L 48+]:</span> Versucht, eine Methode mit leerem Namen des Objekts <i>func</i> aufzurufen. Üblicherweise ist das die Standardmethode des Objekts. Wenn <i>func</i> kein Objekt enthält, wird stattdessen das <a href="Objects.htm#Default_Base_Object">Standard-base-Objekt</a> aufgerufen.</p>
    <p><span class="ver">[v1.0.95+]:</span> Enthält <i>func</i> einen Funktionsnamen, wird die benannte Funktion aufgerufen.</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>F(<i>p</i>*)</strong></td>
    <td><span class="ver">[AHK_L 60+]:</span> Siehe <a href="Functions.htm#Variadic">Variadische Funktionen</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>x[y]</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Objektzugriff</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei kann <i>y</i> eine Parameterliste oder ein berechneter Methodenname sein. Siehe <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> und <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
</table>
<br>
<p id="CommaPerf"><strong>Performance</strong>: Seit v1.0.48 erzielt man häufig bessere Performance, wenn man mehrere aufeinanderfolgende Ausdrücke mit dem Komma-Operator trennt, besonders wenn es darum geht, eine Variable in eine andere Variable zu speichern (z. B. <code>x := y, a := b</code>). Je mehr Ausdrücke zu einem einzigen Ausdruck verbunden werden, desto höher ist die Performance; zum Beispiel könnte man ein Geschwindigkeitszuwachs von 35 % erreichen, wenn man fünf oder zehn einfache Ausdrücke zu einem Ausdruck kombinieren würde.</p>

<h2 id="BuiltIn">Built-in-Variablen</h2>
<p>Die folgenden Variablen sind fest in das Programm integriert und normal abrufbar. Solche Variablen, außer <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a> und <a href="#CommandLine">Befehlszeilenparameter</a>, sind schreibgeschützt; das heißt, dass man deren Inhalte nicht direkt ändern kann.</p>
<h3>Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Skript-Eigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Skript-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#BatchLines">A_BatchLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a></li>
  <li>Abwesenheit des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a></li>
  <li>GUI-Fenster und Menüleisten: <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3>Sonderzeichen</h3>
<table class="info">
  <tr id="Space">
    <td>A_Space</td>
    <td>Diese Variable enthält ein einzelnes Leerzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Diese Variable enthält ein einzelnes Tabulatorzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="prop">Skript-Eigenschaften</h3>
<table class="info">
  <tr id="CommandLine">
    <td>1, 2, 3, etc.</td>
    <td>Diese Variablen werden automatisch erstellt, wann immer ein Skript mit Befehlszeilenparametern gestartet wird. Sie können wie normale Variablennamen geändert oder abgerufen werden (zum Beispiel: %1%). Die Variable %0% enthält die Anzahl der Parameter, die übergeben worden sind (0 wenn keine). Siehe <a href="Scripts.htm#cmd">Befehlszeilenparameter</a> für weitere Details.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td>Das aktuelle Arbeitsverzeichnis, wo das Skript standardmäßig auf Dateien zugreift. Der letzte umgekehrte Schrägstrich ist nicht enthalten, sofern es nicht das Stammverzeichnis ist. Zwei Beispiele: C:\ und C:\Meine Dokumente. Mit <a href="commands/SetWorkingDir.htm">SetWorkingDir</a> kann das Arbeitsverzeichnis geändert werden.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfad des Verzeichnisses, wo das aktuelle Skript zu finden ist. Der letzte umgekehrte Schrägstrich wird weggelassen (auch bei Stammverzeichnissen).</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>Der Dateiname des aktuellen Skripts, ohne Pfad, z. B. MeinSkript.ahk.</td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>Der vollständige Pfad des Skripts, z. B. C:\Meine Dokumente\MeinSkript.ahk.</td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd<br><span class="ver">[v1.1.01+]</span></td>
    <td>Die eindeutige ID (HWND/Handle) des versteckten Skript-Hauptfensters.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Skripts (oder die Zeile aus einer <a href="commands/_Include.htm">#Include-Datei</a>). Diese Zeilennummer kann man auch in <a href="commands/ListLines.htm">ListLines</a> finden; sie kann nützlich zum Melden eines Fehlers sein, z. B.: <code>MsgBox, Eine Zeile konnte nicht in die Log-Datei geschrieben werden (Zeilennummer %A_LineNumber%)</code></p>
    <p>Die Zeilennummern eines <a href="Scripts.htm#ahk2exe">kompilierten Skripts</a> können sich von den Zeilennummern der unkompilierten Version unterscheiden, weil bei der Kompilierung das Skript und seine <a href="commands/_Include.htm">#Include-Dateien</a> in eine große Skriptdatei umgewandelt werden.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>Der vollständige Pfad der Datei, auf der sich <a href="#LineNumber">A_LineNumber</a> bezieht, und prinzipiell das gleiche ist wie <a href="#ScriptFullPath">A_ScriptFullPath</a>, sofern die Zeile nicht zu einer <a href="commands/_Include.htm">#Include-Datei</a> eines unkompilierten Skripts gehört.</td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeineFunktion. Siehe auch: <a href="commands/IsFunc.htm">IsFunc()</a></td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name des <a href="misc/Labels.htm">Labels</a> (Subroutine), das gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeinLabel. A_ThisLabel wird aktualisiert, wann immer das Skript <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausführt. A_ThisLabel wird auch aktualisiert, wenn automatisch-aufgerufene Labels wie <a href="commands/SetTimer.htm">Timer</a>, <a href="commands/Gui.htm#DefaultWin">GUI-Threads</a>, <a href="commands/Menu.htm">Menüpunkte</a>, <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnClipboardChange.htm">OnClipboardChange</a> (Label) und <a href="commands/OnExit.htm">OnExit</a> erfolgen. A_ThisLabel wird nicht aktualisiert, wenn die Skriptausführung in eines der oben genannten Label "gelangt"; in diesem Fall behält A_ThisLabel seinen vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="commands/IsLabel.htm">IsLabel()</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>In den Versionen vor 1.0.22 ist diese Variable leer. Sie enthält die Version des AutoHotkey-Programms, mit dem das Skript ausgeführt wird, z. B. 1.0.22. In einem <a href="Scripts.htm#ahk2exe">kompilierten Skript</a> wird die Version des AutoHotkey-Programms zurückgegeben, mit der das Skript ursprünglich kompiliert worden ist. Aufgrund der Struktur der Versionsnummer kann ein Skript mit "&gt;" oder "&gt;=" überprüfen, ob A_AhkVersion größer als eine bestimmte Versionsnummer ist: <code>if A_AhkVersion &gt;= 1.0.25.07</code>.</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td><p>Bei unkompilierten Skripten: Der vollständige Pfad der EXE-Datei, mit der das aktuelle Skript gerade ausgeführt wird. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
    <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Skripten</a>: Das gleiche wie oben, allerdings wird das AutoHotkey-Verzeichnis mithilfe des Registry-Eintrags <em>HKEY_LOCAL_MACHINE\SOFTWARE\AutoHotkey\InstallDir</em> ermittelt. Wenn es so einen Eintrag nicht gibt, wird A_AhkPath leer gemacht.</p></td>
  </tr>
  <tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td>Enthält eine 1, wenn Zeichenketten im Unicode-Format (16-Bit) sind, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn Zeichenketten im ANSI-Format (8-Bit) sind. Das Format der Zeichenketten ist abhängig davon, mit welcher AutoHotkey-Version das Skript ausgeführt wird oder mit welcher BIN-Datei es kompiliert wurde.</td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Enthält eine 1, wenn das Skript als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn das nicht der Fall ist.</td>
  </tr>
  <tr id="ExitReason">
    <td>A_ExitReason</td>
    <td>Der aktuellste Grund, warum das Skript beendet werden soll. Diese Variable enthält einen Wert, wenn eine <a href="commands/OnExit.htm">OnExit</a>-Subroutine gerade läuft oder bereits einmal aufgrund eines Exitversuchs aufgerufen wurde. Siehe <a href="commands/OnExit.htm">OnExit</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>Das aktuelle 4-stellige Jahr (z. B. 2004). Synonym für A_Year. Hinweis: Wenn der Zeit- oder Datumswert in einem Format angezeigt werden soll, das deinem Gebietsschema oder deiner Sprache entspricht, dann verwende <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar</code> (Zeit und langes Datum) oder <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar,, LongDate</code> (ermittelt ein Datum im langen Format).</td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle zweistellige Monat (01-12). Synonym für A_Mon.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle zweistellige Tag des Monats (01-31). Synonym für A_MDay.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle einstellige Wochentag (1-7). In allen Gebietsschemen ist Tag 1 der Sonntag.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag im Jahr (1-366). Der Wert wird nicht mit Nullen aufgefüllt, z. B. wird 9 abgerufen, nicht 009. Ein Wert kann wie folgt mit Nullen aufgefüllt werden: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , YDay0</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Das aktuelle Jahr + Wochennummer (z. B. 200453) gemäß ISO 8601. Um das Jahr von der Woche zu trennen, verwende <code><a href="commands/StringLeft.htm">StringLeft</a>, Jahr, A_YWeek, 4</code> und <code><a href="commands/StringLeft.htm">StringRight</a>, Woche, A_YWeek, 2</code>. Genaue Definition von A_YWeek: Wenn die Woche, die den 1. Januar hat, vier oder mehr Tage des neuen Jahres enthält, wird sie als Woche 1 angesehen. Ansonsten ist sie die letzte Woche des vorherigen Jahres und die nachfolgende Woche die Woche 1.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle zweistellige Stunde (00-23) im 24-Stunden-Format. Das folgende Beispiel zeigt, wie die Zeit im 12-Stunden-Format sowie die Indikatoren AM bzw. PM abgerufen werden können: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , h:mm:ss tt</code>.</td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle zweistellige Minute (00-59).</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle zweistellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle dreistellige Millisekunde (000-999). Das folgende Beispiel zeigt, wie die führenden Nullen entfernt werden können: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Hinweis: Die Berechnung von Datum- und Zeit kann mithilfe von <a href="commands/EnvAdd.htm">EnvAdd</a> und <a href="commands/EnvSub.htm">EnvSub</a> durchgeführt werden. Außerdem kann <a href="commands/FormatTime.htm">FormatTime</a> einen Datum- und/oder Zeitwert in einem Format anzeigen lassen, das deinem Gebietsschema oder deiner Sprache entspricht.</td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die koordinierte Weltzeit (UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das gleiche wie Greenwich Mean Time (GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Ruft die Anzahl der Millisekunden ab, die seit dem Systemstart verstrichen sind. Die verstrichene Zeit kann man messen, indem man A_TickCount in eine Variable speichert und diese Variable dann von dem neuesten A_TickCount-Wert subtrahiert. Zum Beispiel:</p>
        <pre>Startzeit := A_TickCount
Sleep, 1000
Laufzeit := A_TickCount - Startzeit
MsgBox,  %Laufzeit% Millisekunden sind verstrichen.</pre>
<p>Schaue dir <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a> an, wenn du eine höhere Genauigkeit als die 10 ms von A_TickCount benötigst.</p>
</td>
  </tr>
</table>
<h3 id="settings">Skript-Einstellungen</h3>
<table class="info">
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält eine 1, wenn das Skript via <a href="commands/Suspend.htm">Suspend</a> gesperrt wurde, ansonsten 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält eine 1, wenn der <a href="misc/Threads.htm">Thread</a> direkt unterhalb des aktuellen Threads <a href="commands/Pause.htm">pausiert</a> wurde. Ansonsten enthält sie eine 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält eine 0, wenn <a href="commands/Critical.htm">Critical</a> im <a href="misc/Threads.htm">aktuellen Thread</a> ausgeschalten ist. Ansonsten enthält sie ein Integer größer als Null - also die verwendete <a href="commands/Critical.htm#Interval">Nachrichtenüberprüfungsfrequenz</a> von Critical. Da <code>Critical 0</code> den kritischen Status deaktiviert, kann der aktuelle Status von Critical mithilfe von <code>Alt_IsCritical := A_IsCritical</code> gespeichert und später mit <code>Critical %Alt_IsCritical%</code> wiederhergestellt werden.</td>
  </tr>
  <tr id="BatchLines">
    <td>A_BatchLines</td>
    <td>(Synonym für A_NumBatchLines) Der aktuell gesetzte Wert von <a href="commands/SetBatchLines.htm">SetBatchLines</a>. Beispiele: 200 oder 10ms (je nach Format).</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>Der aktuell gesetzte Modus von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>Die aktuell gesetzte Übereinstimmungsgeschwindigkeit (fast oder slow) von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="AutoTrim">
    <td>A_AutoTrim</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/AutoTrim.htm">AutoTrim</a>.</td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td>Der aktuell gesetzte Modus (On, Off oder Locale) von <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><span class="ver">[AHK_L 46+]</span> Enthält die Standardcodierung für verschiedene Befehle; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="FormatInteger">
    <td>A_FormatInteger</td>
    <td>Das aktuell gesetzte Integer-Format (H oder D) von <a href="commands/SetFormat.htm">SetFormat</a>. <span class="ver">[AHK_L 42+]:</span> Ein kleingeschriebenes h kann auch enthalten sein.</td>
  </tr>
  <tr id="FormatFloat">
    <td>A_FormatFloat</td>
    <td>Das aktuell gesetzte Gleitkommazahlenformat von <a href="commands/SetFormat.htm">SetFormat</a>.</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (Event, Input, Play oder InputThenPlay) von <a href="commands/SendMode.htm">SendMode</a>.</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td><span class="ver">[v1.1.23+]:</span> Die aktuelle Einstellung von <a href="commands/SendLevel.htm">SendLevel</a> (ein Integer zwischen 0 und 100).</td>
  </tr>
  <tr id="StoreCapslockMode">
    <td>A_StoreCapslockMode</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (On oder Off) von <a href="commands/SetStoreCapslockMode.htm">SetStoreCapslockMode</a>.</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    
    A_KeyDuration</td>
    <td>Die aktuell gesetzte Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> (immer dezimal, niemals hexadezimal). A_KeyDuration benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    
    A_KeyDurationPlay</td>
    <td>Die aktuell gesetzte Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> für den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus (immer dezimal, niemals hexadezimal). Benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetWinDelay.htm">SetWinDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetControlDelay.htm">SetControlDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    
    A_MouseDelayPlay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetMouseDelay.htm">SetMouseDelay</a> (immer dezimal, nicht hexadezimal). A_MouseDelay ist für den traditionellen SendEvent-Modus, und A_MouseDelayPlay für <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>. A_MouseDelayPlay benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>Die aktuell gesetzte Geschwindigkeit von <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    
    A_CoordModePixel<br>
    
    A_CoordModeMouse<br>
    
    A_CoordModeCaret<br>
    
    A_CoordModeMenu</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (Window, Client oder Screen) von <a href="commands/CoordMode.htm">CoordMode</a>.</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td><span class="ver">[v1.1.08+]:</span> Die aktuell gesetzte Registry-Ansicht von <a href="commands/SetRegView.htm">SetRegView</a>.</td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Enthält eine 1, wenn das Infobereichssymbol gerade versteckt ist, ansonsten 0. Das Symbol kann mithilfe von <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> oder des <a href="commands/Menu.htm">Menu</a>-Befehls versteckt werden.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td>Enthält den Text des ToolTips, den man via <code><a href="commands/Menu.htm">Menu</a>, Tray, Tip</code> für das Infobereichssymbol definiert hat. Ansonsten ist diese Variable leer.</td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Enthält den vollständigen Pfad der Symboldatei, die man via <code><a href="commands/Menu.htm">Menu</a>, Tray, Icon</code> für das Infobereichssymbol definiert hat. Ansonsten ist diese Variable leer. <strong>Bekannte Einschränkung:</strong> Dieser Pfad kann falsch sein, wenn man einen relativen Pfad einer DLL-Systemdatei übergeben hat; zum Beispiel <code>Menu, Tray, Icon, user32.dll, 2</code>.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten enthält diese Variable die Nummer des Symbols von A_IconFile (üblicherweise 1).</td>
  </tr>
</table>
<h3>Abwesenheit des Benutzers</h3>
<table class="info">
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit der letzten Eingabe (Tastatur, Maus usw.) verstrichen sind. Diese Variable ist nützlich, um herauszufinden, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Skripten (z. B. der <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Befehl) werden diesen Wert wieder auf 0 setzen. Dieser Wert erhöht sich in der Regel um 10, deshalb sollte man verhindern zu überprüfen, ob er genau mit einem anderen Wert übereinstimmt. Überprüfe stattdessen, ob dieser Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel: <code>IfGreater, A_TimeIdle, 600000, MsgBox, Die letzte Eingabeaktivität erfolgte vor ca. 10 Minuten</code>.</td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td><p>Diese Variable verhält sich wie A_TimeIdle, aber ignoriert künstliche Tastatureingaben und/oder Mausklicks, wann immer der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert wird; das heißt, dass die Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastatureingaben und Mausklicks fälschlicherweise die Anwesenheit des Benutzers vortäuschen. Wenn beide Hooks fehlen, hat diese Variable die gleiche Bedeutung wie A_TimeIdle. Wenn nur ein einziger Hook installiert ist, werden nur seine physischen Eingaben Einfluss auf A_TimeIdlePhysical haben (der andere/nicht-installierte Hook, sowohl physisch als auch künstlich, hat keine Wirkung).</p></td>
  </tr>
</table>
<h3>GUI-Fenster und Menüleisten</h3>
<table class="info">
  <tr id="DefaultGui">
    <td>A_DefaultGui <span class="ver">[v1.1.23+]</span></td>
    <td>Name oder Nummer vom <a href="commands/Gui.htm#Default">Standard-GUI</a> des aktuellen Threads.</td>
  </tr>
  <tr id="DefaultListView">
    <td>A_DefaultListView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="commands/Gui.htm#Events">Variablenname</a> oder <a href="commands/Gui.htm#HwndOutputVar">HWND</a> des <a href="commands/ListView.htm">ListView-Steuerelements</a>, auf dem sich die <a href="commands/ListView.htm#BuiltIn">ListView-Funktionen</a> gerade beziehen. Fehlt dem Standard-GUI eine ListView, dann ist diese Variable leer.</td>
  </tr>
  <tr id="DefaultTreeView">
    <td>A_DefaultTreeView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="commands/Gui.htm#Events">Variablenname</a> oder <a href="commands/Gui.htm#HwndOutputVar">HWND</a> des <a href="commands/TreeView.htm">TreeView-Steuerelements</a>, auf dem sich die <a href="commands/TreeView.htm#BuiltIn">TreeView-Funktionen</a> gerade beziehen. Fehlt dem Standard-GUI eine TreeView, dann ist diese Variable leer.</td>
  </tr>
  <tr id="Gui">
    <td>A_Gui</td>
    <td>Name oder Nummer des <a href="commands/Gui.htm">GUI</a>-Fensters, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable enthält nur einen Wert, wenn ein GUI-Steuerelement, Menüleistenelement oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat.</td>
  </tr>
  <tr id="GuiControl">
    <td>A_GuiControl</td>
    <td>Das GUI-Steuerelement bzw. der Name seiner zugeordneten Variable, welches den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Fehlt dem Steuerelement eine <a href="commands/Gui.htm#Events">zugeordnete Variable</a>, enthält A_GuiControl stattdessen die ersten 63 Zeichen des Textes/der Bezeichnung (da man meistens den Buttons keine Variablennamen zuordnet). A_GuiControl ist leer, sobald: 1) A_Gui leer ist; 2) ein GUI-Menüleistenpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) dem Steuerelement eine zugeordnete Variable und Bezeichnung fehlt; oder 4) das Steuerelement nicht länger vorhanden ist, welches ursprünglich den aktuellen Thread gestartet hat (z. B. durch <a href="commands/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr id="GuiWidth">
    <td>A_GuiWidth<br>
    
    A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und Höhe des GUI-Fensters, sofern sie in einer <a href="commands/Gui.htm#GuiSize">GuiSize-Subroutine</a> verwendet werden. Sie beziehen sich auf den Client-Bereich des GUI-Fensters - das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen. <span class="ver">[v1.1.11+]:</span> Diese Werte sind von der <a href="commands/Gui.htm#DPIScale">DPI-Skalierung</a> abhängig.</td>
  </tr>
  <tr>
    <td><span id="GuiX"></span><span id="GuiY"></span>A_GuiX<br>
    
    A_GuiY</td>
    <td>Diese Variablen enthalten die X- und Y-Koordinaten bei <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignissen. Die Koordinaten sind relativ zur linken oberen Ecke des Fensters. <span class="ver">[v1.1.11+]:</span> Diese Werte sind von der <a href="commands/Gui.htm#DPIScale">DPI-Skalierung</a> abhängig.</td>
  </tr>
  <tr>
    <td><span id="GuiEvent"></span><span id="GuiControlEvent"></span>A_GuiEvent<br><span class="small80">oder A_GuiControlEvent</span></td>
    <td><p>Das Ereignis, welches den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn dieser Thread von etwas gestartet wurde, das keine <a href="commands/Gui.htm">GUI-Aktion</a> ist, dann ist diese Variable leer. Ansonsten enthält sie eine der folgenden Zeichenketten:</p>
      <p><strong>Normal</strong>: Das Ereignis wurde durch einen Linksklick oder durch Tastatureingaben ausgelöst (Pfeiltasten, Tabulatortaste, Leertaste, unterstrichene Tastenkürzel und so weiter). Dieser Wert wird auch bei Menüleistenelementen und Sonderereignissen wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick</strong>: Das Ereignis wurde durch einen Doppelklick ausgelöst. Hinweis: Der erste Klick des Doppelklicks löst weiterhin ein <em>Normal</em>-Ereignis aus. Das heißt, dass die Subroutine zweimal gestartet wird: einmal beim ersten Klick und nochmals beim zweiten Klick.</p>
      <p><strong>RightClick</strong>: Tritt nur bei <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/ListView.htm">ListViews</a> und <a href="commands/TreeView.htm">TreeViews</a> auf.</p>
      <p><strong>Kontextabhängige Werte:</strong> Für weitere Details, siehe <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#Slider">Slider</a>, <a href="commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="commands/ListView.htm">ListView</a> und <a href="commands/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="commands/OnClipboardChange.htm">OnClipboardChange-Label</a></li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/OnMessage.htm">OnMessage()</a></li>
        <li><a href="commands/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="misc/RegExCallout.htm">Callouts in Regulären Ausdrücken</a></li>
        <li><a href="commands/Gui.htm#label">GUI-Ereignisse</a>, also <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#ListBox">ListBox</a>, <a href="commands/ListView.htm">ListView</a>, <a href="commands/TreeView.htm">TreeView</a> und <a href="commands/GuiControls.htm#StatusBar">StatusBar</a>. Wenn es keine zusätzlichen Informationen über ein Ereignis gibt, enthält A_EventInfo eine 0.</li>
      </ul></td>
  </tr>
</table>
<p>Hinweis: Im Gegensatz zu Variablen wie A_ThisHotkey behält jeder <a href="misc/Threads.htm">Thread</a> seinen eigenen Wert für A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo. Das heißt, dass die ursprünglichen/richtigen Werte auch dann noch zur Verfügung stehen, wenn ein Thread unterbrochen und dann fortgesetzt wird.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte</h3>
<table class="info">
  <tr id="ThisMenuItem">
    <td>A_ThisMenuItem</td>
    <td>Der Name des zuletzt ausgewählten <a href="commands/Menu.htm">benutzerdefinierten Menüpunkts</a> (ansonsten leer).</td>
  </tr>
  <tr id="ThisMenu">
    <td>A_ThisMenu</td>
    <td>Enthält den Namen des Menüs, wo A_ThisMenuItem ausgewählt wurde.</td>
  </tr>
  <tr id="ThisMenuItemPos">
    <td>A_ThisMenuItemPos</td>
    <td>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem in A_ThisMenu kennzeichnet. Der erste Menüpunkt ist 1, der Zweite ist 2 und so weiter. Trennlinien haben auch eine Nummer. Diese Variable ist leer, wenn A_ThisMenuItem auch leer ist oder nicht länger in A_ThisMenu vorkommt. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">nicht-automatisch-ersetzende Hotstring</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, wenn der <a href="misc/Threads.htm">aktuelle Thread</a> von einem anderen Hotkey unterbrochen wird, deshalb solltest du diesen Wert in eine andere Variable speichern, wenn du ihn später noch brauchst.</p>
      <p>Ein Hotkey kann man via <a href="commands/Hotkey.htm">Hotkey-Befehl</a> oder <a href="Hotkeys.htm">Doppelpunkt-Label</a> erstellen. Wenn man ein Hotkey das erste Mal erstellt, wird ihm ein dauerhafter Name zugewiesen, der die aktuelle Taste und Anordnung der Modifkatorzeichen beinhaltet. Diesen Namen teilen sich alle <a href="commands/_IfWinActive.htm#variant">Varianten</a> des Hotkeys.</p>
      <p>Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Verhält sich wie A_ThisHotkey, aber bezieht sich auf den zuvor ausgeführten Hotkey. Ansonsten ist sie leer.</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td><span class="ver">[v1.1.01+]:</span> Der Name der vorletzten gedrückten Taste, oder eine leere Zeichenkette, wenn kein geeigneter Tastendruck im Tastenverlauf gefunden werden kann. Alle via Skript erzeugten Eingaben werden ignoriert. Damit diese Variable von Nutzen ist, muss der <a href="commands/_InstallKeybdHook.htm">Tastatur</a>- oder <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert und der <a href="commands/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit dem letzten Drücken von A_ThisHotkey verstrichen sind. Sie wird -1 sein, wann immer A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit dem letzten Drücken von A_PriorHotkey verstrichen sind. Sie wird -1 sein, wann immer A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Das <a href="Hotstrings.htm#EndChars">Endungszeichen</a>, das der Benutzer zuletzt gedrückt hat, um einen <a href="Hotstrings.htm">nicht-automatisch-ersetzenden Hotstring</a> auszulösen. Wenn kein Endungszeichen notwendig war (wegen der *-Option), wird diese Variable leer gemacht.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen</h3>
<table class="info">
  <tr id="ComSpec">
    <td>ComSpec<br>
    <span class="ver">[v1.0.43.08+]</span></td>
    <td>Enthält den Pfad der Windows-Konsole, welcher auch in der ComSpec-Umgebungsvariable zu finden ist (z. B. C:\Windows\system32\cmd.exe). Diese Variable wird oft in Verbindung mit <a href="commands/Run.htm">Run/RunWait</a> verwendet. Hinweis: Bei dieser Variable fehlt das Präfix "A_".</td>
  </tr>
  <tr id="Temp">
    <td>A_Temp<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad des Ordners, der dazu bestimmt ist, temporäre Dateien zu beinhalten (z. B. C:\DOCUME~1\Benutzername\LOCALS~1\Temp). Dieser Pfad wird von einem der folgenden Standorte abgerufen (in dieser Reihenfolge): 1) <a href="#env">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis.</td>
  </tr>
  <tr id="OSType">
    <td>A_OSType</td>
    <td>Der Typ des aktuell laufenden Betriebssystems. Da AutoHotkey 1.1 nur NT-basierte Betriebssysteme unterstützt, wird das immer WIN32_NT sein. Ältere AutoHotkey-Versionen werden in Windows 95/98/Me WIN32_WINDOWS zurückgeben.</td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td><p>Je nach Windows-Version eine der folgenden Zeichenketten: WIN_7 <span class="ver">[benötigt AHK_L 42+]</span>, WIN_8 <span class="ver">[benötigt v1.1.08+]</span>, WIN_8.1 <span class="ver">[benötigt v1.1.15+]</span>, WIN_VISTA, WIN_2003, WIN_XP, WIN_2000.</p>
    <p>Wenn du in den Eigenschaften der AutoHotkey-Datei oder des kompilierten Skripts die Kompatibilitätseinstellungen änderst, wird das Betriebssystem bzw. A_OSVersion eine andere Versionsnummer melden.</p>
    <p><span class="ver">[v1.1.20+]:</span> Wenn die Version deines Betriebssystems oben nicht aufgelistet ist, wird eine Zeichenkette im Format "Haupt.Neben.Build" zurückgegeben. Zum Beispiel wäre <code>10.0.14393</code> Windows 10 Build 14393, auch bekannt als Version 1607.</p>
      <pre><em>; Das folgende Beispiel ist nicht mehr relevant, weil solche Betriebssysteme nicht länger unterstützt werden.</em>
if A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Hinweis: Keine Leerzeichen neben den Kommas.</em>
{
    MsgBox Dieses Skript benötigt Windows 2000/XP oder höher.
    ExitApp
}</pre>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td><span class="ver">[v1.1.08+]:</span> Enthält eine 1 (wahr), wenn das Betriebssystem im 64-Bit-Format ist, oder eine 0 (falsch), wenn es im 32-Bit-Format ist.</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td><span class="ver">[AHK_L 42+]:</span> Enthält die Größe eines Pointers in Bytes. Dieser Wert ist entweder eine 4 oder eine 8, abhängig davon, ob die verwendete AutoHotkey-Datei im 32- oder 64-Bit-Format ist.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems als <a href="misc/Languages.htm">vierstelliger Code</a>.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Netzwerkname des Computers.</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der das Skript gestartet hat.</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: C:\Windows</td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles<br>
    oder ProgramFiles</td>
    <td>
      <p>Der Programme-Ordner (z. B. <code>C:\Programme</code> oder <code>C:\Programme (x86)</code>). Diese Built-In-Variable entspricht prinzipiell der <a href="#env">Umgebungsvariable</a> <code>ProgramFiles</code>.</p>
      <p>Auf <a href="#Is64bitOS">64-Bit-Systemen</a> (und nicht 32-Bit-Systemen) gilt Folgendes:</p>
      <ul>
        <li>Wenn die skript-ausführende EXE-Datei im 32-Bit-Format ist, gibt A_ProgramFiles den Pfad des Ordners "Programme (x86)" zurück.</li>
        <li>Bei 32-Bit-Prozessen enthält die <a href="#env">Umgebungsvariable</a> <code>ProgramW6432</code> den Pfad der 64-Bit-Version des Programme-Ordners. In Windows 7 und höher gilt das auch für 64-Bit-Prozesse.</li>
        <li>Die Umgebungsvariable <code>ProgramFiles(x86)</code> enthält den Pfad der 32-Bit-Version des Programme-Ordners.</li>
      </ul>
      <p>Seit v1.0.43.08 kannst du das Präfix "A_" weglassen, um dir den Wechsel auf <a href="commands/_NoEnv.htm">#NoEnv</a> zu erleichtern.</p>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad des Ordners mit anwendungsspezifischen Daten des aktuellen Benutzers. Zum Beispiel: C:\Dokumente und Einstellungen\Benutzername\Anwendungsdaten</td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad des Ordners mit anwendungsspezifischen Daten aller Benutzer.</td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>Der vollständige Pfad des Ordners mit den Desktop-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>Der vollständige Pfad des Ordners mit den Desktop-Dateien aller Benutzer.</td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>Der vollständige Pfad des Ordners mit den Startmenü-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>Der vollständige Pfad des Ordners mit den Startmenü-Dateien aller Benutzer.</td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>Der vollständige Pfad des Programmordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>Der vollständige Pfad des Programmordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>Der vollständige Pfad des Autostart-Ordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>Der vollständige Pfad des Autostart-Ordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>Der vollständige Pfad des Ordners "Eigene Dokumente" des aktuellen Benutzers. In Gegensatz zu allen anderen ähnlichen Variablen ist hier der letzte umgekehrte Schrägstrich nicht enthalten, wenn sich der Ordner im Stammverzeichnis eines Laufwerks befindet. Also beispielsweise M: anstatt M:\</td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer Administratorrechte hat, enthält diese Variable eine 1. Ansonsten enthält sie eine 0.</p>
    <p id="RequireAdmin">Mit <a href="commands/Run.htm#RunAs">Run *RunAs</a> kann man das Skript mit Adminrechten neu starten lassen (oder anzeigen lassen, dass der Benutzer Adminrechte benötigt). Beachte aber, dass ein mit Adminrechten gestartetes Skript dazu führt, dass alle Programme, die das Skript startet, auch Adminrechte haben werden. In <a href="FAQ.htm#uac">der FAQ</a> findest du eine mögliche Alternative.</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    
    A_ScreenHeight</p></td>
    <td><p>Die Breite und Höhe des primären Anzeigegeräts in Pixel (z. B. 1024 und 768).</p>
      <p>Mit <a href="commands/SysGet.htm">SysGet</a> können die Abmessungen von anderen Anzeigegeräten abgerufen werden.</p>
      <p>Das folgende Beispiel zeigt, wie die Breite und Höhe des gesamten Desktops ermittelt werden kann (selbst wenn er sich über mehrere Anzeigegeräte erstrecken sollte):</p>
<pre>
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleBreite, 78
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleHöhe, 79
</pre>
    <p>Mit <a href="commands/SysGet.htm">SysGet</a> kann man auch den Arbeitsbereich eines Anzeigegeräts ermitteln. Dieser Bereich kann kleiner sein als der Gesamtbereich des Anzeigegeräts, weil die Abmessungen von der Taskleiste und anderen registrierten Desktopsymbolleisten abgezogen werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI <span class="ver">[v1.1.11+]</span></td>
    <td>Die Anzahl der Pixel pro logischem Inch entlang der Bildschirmbreite. Bei einem Multi-Anzeigegerät-System gilt dieser Wert für alle Anzeigegeräte. Bei vielen Systemen ist das 96; abhängig von der Textgrößeneinstellung (DPI) des Systems. Siehe auch <a href="commands/Gui.htm#DPIScale">Gui -DPIScale</a>.</td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4</td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadaptern im Computer.</td>
  </tr>
</table>
<h3>Sonstiges</h3>
<table class="info">
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des aktuell angezeigten Mauszeigers. Die Variable wird eines der folgenden Wörter enthalten: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Großbuchstaben nach Size sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="Caret">
    <td>A_CaretX<br>
    
    A_CaretY</td>
    <td><p>Die aktuellen X- und Y-Koordinaten der Texteinfügemarke. Die Koordinaten beziehen sich auf das aktive Fenster. <a href="commands/CoordMode.htm">CoordMode</a> kann verwendet werden, um den ganzen Bildschirm einzubeziehen. Wenn es kein aktives Fenster gibt oder wenn die Position der Einfügemarke nicht ermittelt werden kann, sind diese Variablen leer.</p>
      <p>Das folgende Skript zeigt dir in einem sich selbst aktualisierenden ToolTip die Position der Einfügemarke an, während du die Einfügemarke verschiebst. Beachte, dass einige Fenster (z. B. bestimmte Versionen von MS Word) immer die gleiche Position der Einfügemarke melden, egal auf welcher Position sie wirklich ist.</p>
<pre>
#Persistent
SetTimer, BeobachteEinfügemarke, 100
return

BeobachteEinfügemarke:
ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20
return
</pre>
    </td>
  </tr>
  <tr>
    <td>Clipboard</td>
    <td>Enthält oder ändert den Inhalt der Zwischenablage. Siehe <a href="misc/Clipboard.htm">Clipboard</a> für mehr Details.</td>
  </tr>
  <tr>
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z. B. Formatierung und Text). Siehe <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr>
    <td>ErrorLevel</td>
    <td>Siehe <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td>Das Ergebnis der GetLastError()-Systemfunktion oder des letzten COM-Objektaufrufs. Weitere Informationen findest du in <a href="commands/DllCall.htm#LastError">DllCall()</a> und <a href="commands/Run.htm#LastError">Run/RunWait</a>.</td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr id="Index">
    <td>A_Index</td>
    <td>Enthält die Nummer des aktuellen Schleifendurchlaufs (ein 64-Bit-Integer). Zum Beispiel enthält diese Variable die Nummer 1, wenn das Skript den Schleifenkörper zum ersten Mal ausführt. Weitere Informationen können in <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a> gefunden werden.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.</td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopFile.htm">Dateimuster-Schleife</a> gültig.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.</td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopReg.htm">Registry-Schleife</a> gültig.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopReadFile.htm">Datei-lesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">Parsende Schleife</a>.</td>
  </tr>
</table>

<h2 id="env">Umgebungsvariablen vs. normale Variablen</h2>
<p>Umgebungsvariablen werden vom Betriebssystem verwaltet. Du kannst dir eine Liste von Umgebungsvariablen anzeigen lassen, wenn du in der Windows-Konsole SET eingibst und ENTER drückst.</p>
<p>Mit <a href="commands/EnvSet.htm">EnvSet</a> kann eine neue Umgebungsvariable erstellt oder der Inhalt einer vorhandenen Umgebungsvariable geändert werden. Allerdings sind solche Ergänzungen und Änderungen privater Natur; sie können vom Rest des Systems nicht erkannt werden. Bei Programmen (oder Skripten), die via <a href="commands/Run.htm">Run</a> oder <a href="commands/Run.htm">RunWait</a> gestartet werden, gilt eine Ausnahme: Sie erben sowohl die Umgebungsvariablen des übergeordneten Skripts als auch die privaten Umgebungsvariablen.</p>
<p>Seit v1.0.43.08 ist es empfehlenswert, dass alle neuen Skripte die Umgebungsvariablen wie <em>Path</em> mithilfe des folgenden Beispiels abrufen:</p>
<pre><a href="commands/EnvGet.htm">EnvGet, AusgabeVar, Path</a>  <em>; Zur Erläuterung, siehe <a href="commands/_NoEnv.htm">#NoEnv</a>.</em></pre>
<h2 id="cap">Kapazität und Speicher einer Variable</h2>
<ul>
  <li>Jede Variable kann bis zu 64 MB Text enthalten (dieses Limit kann mit <a href="commands/_MaxMem.htm">#MaxMem</a> erhöht werden).</li>
  <li>Wenn die neue zu übergebende Zeichenkette die aktuelle Länge der Variable überschreitet, wird der reservierte Systemspeicher dieser Variable automatisch erweitert.</li>
  <li>Um den Speicher einer großen Variable freizugeben, weist man ihr nichts zu (z. B. <code>Var := ""</code>).</li>
  <li>Es können beliebig viele Variablen erstellt werden. Das Programm kann mit mehreren Millionen Variablen umgehen, ohne dass es an Performance einbüßt.</li>
  <li>Bei Befehlen, Funktionen und Ausdrücken, die numerische Eingabewerte akzeptieren, haben Gleitkommazahlen eine Genauigkeit von 15 Ziffern. Integer können vorzeichenbehaftete 64-Bit-Werte sein, in einem Bereich von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF). Alle anderen Integer-Konstanten, die diesen Bereich überschreiten, werden nicht unterstützt und liefern widersprüchliche Ergebnisse. Arithmetische Operationen mit Integern werden bei Überlauf umgekehrt (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
