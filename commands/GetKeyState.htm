<!DOCTYPE HTML>
<html>
<head>
<title>GetKeyState / GetKeyState()</title>
<meta name="description" content="Verwenden Sie GetKeyState in diesem freien Makro-Programm, um auf einfache Weise zu überprüfen, ob eine Taste oben oder unten ist.">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState / GetKeyState()</h1>
<p>Überprüft, ob eine Taste oben oder unten ist. Kann auch den Joystickstatus abrufen.</p>

<h2 id="command">GetKeyState</h2>
<p class="warning"><strong>Veraltet:</strong> Dieser Befehl ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen die <a href="#function">GetKeyState</a>-Funktion.</p>

<pre class="Syntax">
<span class="func">GetKeyState</span>, AusgabeVar, Tastenname <span class="optional">, Modus</span>
</pre>
<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name einer Variable, in der der Status der Taste gespeichert werden soll, was entweder D für Unten (Down) oder U für Oben (Up) ist. Die Variable wird leer sein, wenn der Status der Taste nicht ermittelt werden konnte. Für die speziellen Tasten des Joysticks wie Achsen und POV-Schalter <a href="#joystick">werden andere Werte abgerufen</a>.</p>
      </dd>

  <dt>Tastenname</dt>
  <dd><p>Dieser Parameter kann so ziemlich jedes Zeichen von der Tastatur oder ein Tastenname aus der <a href="../KeyList.htm">Tastenliste</a> sein, darunter auch Maus- und Joystick-Tasten. Beispiele: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternativ kann ein eindeutiger virtueller Tastencode wie vkFF angegeben werden. Diese Alternative ist in Ausnahmefällen nützlich, wo eine Taste keinen Namen hat. Der virtuelle Tastencode einer solchen Taste kann durch Befolgen der Schritte am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> ermittelt werden.</p> 
      <p><b>Bekannte Einschränkung</b>: Dieser Befehl kann nicht zwischen zwei Tasten unterscheiden, die den gleichen virtuellen Tastencode haben, wie z. B. Left und NumpadLeft.</p></dd>

  <dt>Modus</dt>
  <dd><p>Dieser Parameter wird beim Abrufen eines Joystick-Status ignoriert.</p>
      <p>Fehlt dieser Parameter, wird standardmäßig der logische Tastenstatus ermittelt. Dieser Status macht dem Betriebssystem und aktivem Fenster glauben, dass die Taste gedrückt wurde, welches aber nicht unbedingt dem physischen Status entspricht.</p>
	  <p>Alternativ kann einer der folgenden Buchstaben angegeben werden:</p>
      <p><strong>P</strong>: Ermittelt den physischen Status (z. B. ob der Benutzer eine Taste physisch gedrückt hält). Der physische Zustand einer Taste oder Maustaste ist üblicherweise das gleiche wie der logische Zustand. Wenn aber Tastatur- und/oder Maus-Hooks installiert sind, gibt der ermittelte Status genau an, ob der Benutzer eine Taste physisch gedrückt hält oder nicht (solange sie nach unten gedrückt wurde, während das Skript lief). Mit dem <a href="KeyHistory.htm">KeyHistory</a>-Befehl oder -Menüpunkt können Sie überprüfen, ob Ihr Skript die Hooks benutzt. Durch Hinzufügen von <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> und/oder <a href="_InstallMouseHook.htm">#InstallMouseHook</a> können die Hooks im Skript erzwungen werden.</p>
      <p><strong>T</strong>: Ermittelt den Umschaltstatus (nur für umschaltbare Tasten wie FESTSTELL, NUM, ROLLEN und EINFG gültig). D bedeutet, dass die Taste "An" ist, und U bedeutet, dass sie "Aus" ist.</p>
    </dd>

</dl>

<h2 id="function">GetKeyState()</h2>

<pre class="Syntax">
TasteIstUnten := <span class="func">GetKeyState</span>(Tastenname <span class="optional">, Modus</span>)
</pre>
<h3>Parameter</h3>
<dl>

  <dt>Tastenname</dt>
  <dd><p>Dieser Parameter kann so ziemlich jedes Zeichen von der Tastatur oder ein Tastenname aus der <a href="../KeyList.htm">Tastenliste</a> sein, darunter auch Maus- und Joystick-Tasten. Beispiele: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternativ kann ein eindeutiger virtueller Tastencode wie vkFF angegeben werden. Diese Alternative ist in Ausnahmefällen nützlich, wo eine Taste keinen Namen hat. Der virtuelle Tastencode einer solchen Taste kann durch Befolgen der Schritte am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> ermittelt werden.</p> 
      <p><b>Bekannte Einschränkung</b>: Diese Funktion kann nicht zwischen zwei Tasten unterscheiden, die den gleichen virtuellen Tastencode haben, wie z. B. Left und NumpadLeft.</p></dd>

  <dt>Modus</dt>
  <dd><p>Dieser Parameter wird beim Abrufen eines Joystick-Status ignoriert.</p>
      <p>Fehlt dieser Parameter, wird standardmäßig der logische Tastenstatus ermittelt. Dieser Status macht dem Betriebssystem und aktivem Fenster glauben, dass die Taste gedrückt wurde, welches aber nicht unbedingt dem physischen Status entspricht.</p>
	  <p>Alternativ kann einer der folgenden Buchstaben angegeben werden:</p>
      <p><strong>P</strong>: Ermittelt den physischen Status (z. B. ob der Benutzer eine Taste physisch gedrückt hält). Der physische Zustand einer Taste oder Maustaste ist üblicherweise das gleiche wie der logische Zustand. Wenn aber Tastatur- und/oder Maus-Hooks installiert sind, gibt der ermittelte Status genau an, ob der Benutzer eine Taste physisch gedrückt hält oder nicht (solange sie nach unten gedrückt wurde, während das Skript lief). Mit dem <a href="KeyHistory.htm">KeyHistory</a>-Befehl oder -Menüpunkt können Sie überprüfen, ob Ihr Skript die Hooks benutzt. Durch Hinzufügen von <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> und/oder <a href="_InstallMouseHook.htm">#InstallMouseHook</a> können die Hooks im Skript erzwungen werden.</p>
      <p><strong>T</strong>: Ermittelt den Umschaltstatus (nur für umschaltbare Tasten wie FESTSTELL, NUM, ROLLEN und EINFG gültig). 1 (True) bedeutet, dass die Taste "An" ist, und 0 (False) bedeutet, dass sie "Aus" ist.</p>
    </dd>

</dl>

<h3>Rückgabewert</h3>
<p>Diese Funktion gibt 1 zurück, wenn die Taste unten oder eingeschaltet ist, oder 0, wenn sie oben oder ausgeschaltet ist. Für die speziellen Tasten des Joysticks wie Achsen und POV-Schalter <a href="#joystick">werden andere Werte abgerufen</a>.</p>
<p>Wenn <em>Tastenname</em> ungültig ist oder der Status der Taste nicht ermittelt werden konnte, wird eine leere Zeichenkette zurückgegeben.</p>

<h2 id="joystick">Spezielle Tasten des Joysticks</h2>
<p>Wenn <em>Tastenname</em> eine Joystick-Achse wie JoyX ist, wird eine Gleitkommazahl zwischen 0 und 100 zurückgegeben, die die Position des Joysticks als Prozentwert des Bewegungsbereichs dieser Achse repräsentiert. Das Format der Zahl kann via <a href="SetFormat.htm">SetFormat</a> geändert werden. Mit dem <a href="../scripts/JoystickTest.htm">Test-Skript</a> können Sie Ihr(e) Joystick(s) analysieren.</p>
<p>Wenn <em>Tastenname</em> JoyPOV ist, wird ein Wert zwischen 0 und 35900 zurückgegeben. Die folgenden ungefähren POV-Werte werden von den meisten Joysticks verwendet:</p>
<ul>
  <li>-1: keinen Winkel erkannt</li>
  <li>0: nach vorne gerichtet</li>
  <li>9000 (90 Grad): nach rechts gerichtet</li>
  <li>27000 (270 Grad): nach links gerichtet</li>
  <li>18000 (180 Grad): nach hinten gerichtet</li>
</ul>

<h2>Bemerkungen</h2>
<p><a href="KeyWait.htm">KeyWait</a> ist kürzer und einfacher als eine GetKeyState-Schleife, wenn es darum geht, auf eine Tastenzustandsänderung zu warten.</p>
<p>Es kann sein, dass Betriebssysteme mit ungewöhnlichen Tastaturtreibern den Zustand ihrer Tasten nur langsam aktualisieren, besonders der Umschaltstatus von Tasten wie FESTSTELL. Ein Skript, das den Zustand einer solchen Taste überprüft, könnte <a href="Sleep.htm">Sleep</a> davor verwenden, um dem Betriebssystem genug Zeit zum Aktualisieren des Tastenzustands zu verschaffen.</p>
<p>Beispiele zur Verwendung von GetKeyState mit einem Joystick finden Sie in <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a> und <a href="../scripts/JoystickMouse.htm">Joystick-Zu-Maus-Skript</a>.</p>
<h2>Siehe auch</h2>
<p><a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Tastenliste</a>, <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a></p>

<h2>Beispiele</h2>

<h4 id="ex1">Beispiel #1: Befehl vs. Funktion</h4>
<p>Obwohl der erste Codeblock den Befehl und der zweite die Funktion verwendet, sind diese beiden Blöcke funktional identisch:</p>
<pre>GetKeyState, Status, RButton  <em>; Rechte Maustaste.</em>
GetKeyState, Status, Joy2  <em>; Die zweite Taste des ersten Joysticks.</em>

GetKeyState, Status, Shift
if Status = D
    MsgBox Mindestens eine UMSCHALT-Taste ist unten.
else
    MsgBox Keine UMSCHALT-Taste unten.

GetKeyState, Status, CapsLock, T <em>;  D, wenn FESTSTELL-Taste AN ist, ansonsten U.</em>
</pre>
<pre>Status := GetKeyState("RButton")  <em>; Rechte Maustaste.</em>
Status := GetKeyState("Joy2")  <em>; Die zweite Taste des ersten Joysticks.</em>

if GetKeyState("Shift")
    MsgBox Mindestens eine UMSCHALT-Taste ist unten.
else
    MsgBox Keine UMSCHALT-Taste unten.

Status := GetKeyState("CapsLock", "T") <em>; True, wenn FESTSTELL-Taste AN ist, ansonsten False.</em>
</pre>

<h4 id="ex2">Beispiel #2: Neubelegung</h4>
<p>(Dieses Beispiel dient nur zur Veranschaulichung, da es einfacher wäre, auf das interne <a href="../misc/Remap.htm">Neubelegungs-Feature</a> zurückzugreifen.) Im folgenden Hotkey wird die Maustaste gedrückt gehalten, während NumpadAdd unten ist, was NumpadAdd effektiv zu einer Maustaste macht. Diese Methode kann auch genutzt werden, um eine Aktion zu wiederholen, während der Benutzer eine Taste gedrückt hält:</p>
<pre>*NumpadAdd::
MouseClick, left,,, 1, 0, D  <em>; Hält die linke Maustaste gedrückt.</em>
Loop
{
    Sleep, 10
    if !GetKeyState("NumpadAdd", "P")  <em>; Die Taste wurde losgelassen, also Schleife verlassen.</em>
        break
    <em>; ... fügen Sie hier beliebig andere Aktionen ein, die wiederholt werden sollen.</em>
}
MouseClick, left,,, 1, 0, U  <em>; Lässt die Maustaste los.</em>
return</pre>

<h4 id="ex3">Beispiel #3</h4>
<p>Macht das Verhalten einer Joystick-Taste abhängig von der Achsenposition des Joysticks:</p>
<pre>joy2:: 

JoyX := GetKeyState("JoyX")
if JoyX &gt; 75
    MsgBox Aktion #1 (Taste gedrückt, während Joystick nach rechts gedrückt wurde).
else if JoyX &lt; 25
    MsgBox Aktion #2 (Taste gedrückt, während Joystick nach links gedrückt wurde).
else
    MsgBox Aktion #3 (Taste gedrückt, während Joystick horizontal zentriert wurde).
return
</pre>

<h4 id="ex-other">Weitere Beispiele</h4>
<p>Weitere Beispiele finden Sie unter <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a> und <a href="../scripts/JoystickMouse.htm">Joystick-Zu-Maus-Skript</a>.</p>

</body>
</html>
